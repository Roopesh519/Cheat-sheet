{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#cheat-sheet","title":"CHEAT SHEET","text":""},{"location":"#prompts-for-happy-unhappy-path-and-gherkin","title":"Prompts for Happy, Unhappy Path and Gherkin","text":"<p>Generate Happy paths and Unhappy paths <pre><code>Write the happy paths and unhappy paths for the following scenarios step by step. Just include the paths without headings and subheadings. Start with \"Acceptance Criteria\" heading, then list the happy and unhappy paths.\n</code></pre></p> <p>Generate Gherkin for the Acceptance Criteria <pre><code>Generate concise Gherkin syntax examples for general button interactions based on context. Use a first-person perspective, starting with \"When I click this button.\" For positive outcomes, include \"Given I am on this screen\" or \"Then I should see this screen\" or \"Then I should be redirected to this screen.\" Also, include \"Then I should receive a message stating that 'example'.\" Adapt the number of examples based on context, incorporating happy paths and unhappy paths. Break down scenarios if there are more than 3 or 4 details; otherwise, keep it concise using \"And\" to divide details. Always use \"When I click the [Button Name] button\" for button interactions. Additionally, format multiple data entries in a more concise manner (e.g., use \"And I enter a valid email address, phone number, and mobile number\"). Ensure that error or success messages are consistently displayed as \"I receive a message stating that 'message'.\"\n\nConsider the specified Conditions of Satisfaction (COS) for the Gherkin syntax. Provide all possible scenarios and scenario outlines. Include invalid scenarios in Gherkin examples.\n\nWhen you are ready, say yes and I will enter the scenarios.  \nThink step by step.\n\nThe format is\n\nAcceptance Criteria\n(nothing under acceptance criteria)\nHappy Paths:\n(All the happy paths with number bullets )\nUnhappy Paths:\n(All the unhappy paths with number bullets )\n</code></pre></p>"},{"location":"#git-fundamental-commands","title":"GIT Fundamental Commands","text":""},{"location":"#git-fundamentals","title":"Git Fundamentals","text":"<ol> <li><code>git add .</code></li> <li><code>git commit -m \u201cEX-111 #time 1h 30m feature: write the updates\u201d</code></li> <li><code>git push</code></li> <li><code>git pull</code></li> <li><code>git stash</code> - If you have added changes but want to switch to another branch before committing, stash will hide the changes and retrieve them later.</li> <li><code>git stash apply</code></li> </ol>"},{"location":"#important-commands","title":"Important Commands","text":"<ol> <li>Dry run <pre><code>npm run bdd_dry_run\n</code></pre></li> <li>Run localhost <pre><code>npm run dev\n</code></pre></li> <li>Run single feature <pre><code>npx cucumber-js path/to/your/file.feature --import test\n</code></pre></li> <li>Run all the features  </li> <li>Install Packages <pre><code>npm i --force\n</code></pre> <pre><code>npm install --force\n</code></pre></li> </ol>"},{"location":"#test-the-pipeline-locally","title":"Test the Pipeline Locally","text":"<p><pre><code>pm2 kill\n</code></pre> <pre><code>npm run build\n</code></pre> <pre><code>pm2 start scripts/server.js\n</code></pre> <pre><code>node scripts/bdd_unit_testing_azure.js\n</code></pre> <pre><code>node scripts/integration_testing.js\n</code></pre></p>"},{"location":"#miscellaneous-commands","title":"Miscellaneous Commands:","text":"<ol> <li>Remove a directory: <pre><code>rm -rf directory-name\n</code></pre> <pre><code>rm -r directory-name\n</code></pre></li> </ol>"},{"location":"#imac-shortcuts","title":"iMac Shortcuts","text":""},{"location":"#system-and-finder-shortcuts","title":"System and Finder Shortcuts","text":"<ul> <li><code>Command (\u2318) + Space</code>: Open Spotlight search.</li> <li><code>Command (\u2318) + Tab</code>: Switch between open applications.</li> <li><code>Command (\u2318) + Option (\u2325) + Esc</code>: Force quit an application.</li> <li><code>Command (\u2318) + H</code>: Hide the current application.</li> <li><code>Command (\u2318) + Q</code>: Quit the current application.</li> <li><code>Command (\u2318) + N</code>: Open a new Finder window.</li> <li><code>Command (\u2318) + Shift (\u21e7) + N</code>: Create a new folder.</li> <li><code>Command (\u2318) + Delete (\u232b)</code>: Move selected item to the Trash.</li> <li><code>Command (\u2318) + Shift (\u21e7) + Delete (\u232b)</code>: Empty the Trash.</li> </ul>"},{"location":"#text-editing-and-document-shortcuts","title":"Text Editing and Document Shortcuts","text":"<ul> <li><code>Command (\u2318) + C</code>: Copy selected item.</li> <li><code>Command (\u2318) + V</code>: Paste copied item.</li> <li><code>Command (\u2318) + X</code>: Cut selected item.</li> <li><code>Command (\u2318) + Z</code>: Undo the previous action.</li> <li><code>Command (\u2318) + Shift (\u21e7) + Z</code>: Redo the previous undo.</li> <li><code>Command (\u2318) + A</code>: Select all items.</li> <li><code>Command (\u2318) + F</code>: Find items in a document or open a Find window.</li> <li><code>Command (\u2318) + S</code>: Save the current document.</li> <li><code>Command (\u2318) + P</code>: Print the current document.</li> <li><code>Command (\u2318) + T</code>: Open a new tab (in supported apps).</li> </ul>"},{"location":"#window-and-application-management","title":"Window and Application Management","text":"<ul> <li><code>Command (\u2318) + M</code>: Minimize the current window.</li> <li><code>Command (\u2318) + Option (\u2325) + M</code>: Minimize all windows of the current application.</li> <li><code>Command (\u2318) + W</code>: Close the current window.</li> <li><code>Command (\u2318) + Option (\u2325) + W</code>: Close all windows of the current application.</li> <li><code>Command (\u2318) + Control (\u2303) + F</code>: Toggle full-screen mode.</li> </ul>"},{"location":"#screenshot-shortcuts","title":"Screenshot Shortcuts","text":"<ul> <li><code>Command (\u2318) + Shift (\u21e7) + 3</code>: Capture the entire screen.</li> <li><code>Command (\u2318) + Shift (\u21e7) + 4</code>: Capture a selected area of the screen.</li> <li><code>Command (\u2318) + Shift (\u21e7) + 5</code>: Open the screenshot toolbar to take screenshots and screen recordings.</li> </ul>"},{"location":"#accessibility-and-special-features","title":"Accessibility and Special Features","text":"<ul> <li><code>Command (\u2318) + Option (\u2325) + D</code>: Show or hide the Dock.</li> <li><code>Command (\u2318) + Control (\u2303) + Space</code>: Open the Character Viewer to select emojis and symbols.</li> <li><code>Command (\u2318) + Control (\u2303) + Q</code>: Lock the screen.</li> </ul>"},{"location":"#emulator-commands","title":"Emulator Commands","text":""},{"location":"#emulator-path","title":"Emulator Path","text":"<pre><code>export ANDROID_HOME=$HOME/Library/Android/sdk\nexport PATH=$PATH:$ANDROID_HOME/emulator\nexport PATH=$PATH:$ANDROID_HOME/platform-tools\n</code></pre>"},{"location":"#run-emulator","title":"Run Emulator","text":"<pre><code>npm run android:dev\n</code></pre>"},{"location":"#detox-build-command","title":"Detox Build Command","text":"<pre><code>detox build -c android.emu.debug \n</code></pre>"},{"location":"#build-the-android-app-for-testing","title":"Build the Android App for Testing","text":"<p><pre><code>npm run prebuild\n</code></pre> <pre><code>cd android\n</code></pre> <pre><code>./gradlew app:assembleRelease\n</code></pre></p>"},{"location":"#get-the-apk-file","title":"Get the APK File","text":"<p>Retrieve the APK from: <pre><code>Android/app/build/outputs/apk/release/app-release.apk\n</code></pre></p>"},{"location":"maestro/","title":"Maestro","text":"<p>Here is a well-documented <code>maestro.md</code> file based on the provided steps:</p> <pre><code># Maestro Setup for E2E Testing in Expo Project\n\nThis guide outlines the steps to set up and configure Maestro for end-to-end (E2E) testing in your existing Expo project.\n\n## Table of Contents\n1. [Verify Project Setup](#1-verify-project-setup)\n2. [Install Maestro CLI Locally](#2-install-maestro-cli-locally)\n3. [Configure EAS Build](#3-configure-eas-build)\n4. [Disable New Android Build Infrastructure](#4-disable-new-android-build-infrastructure)\n5. [Create Maestro Test Flows](#5-create-maestro-test-flows)\n6. [Test Locally](#6-test-locally)\n7. [Create Custom EAS Build Workflow](#7-create-custom-eas-build-workflow)\n8. [Modify `eas.json`](#8-modify-easjson)\n9. [Run EAS Build with Maestro Tests](#9-run-eas-build-with-maestro-tests)\n10. [View Test Results](#10-view-test-results)\n\n---\n\n## 1. Verify Project Setup\n\nMake sure you have access to the repository with the Expo project and are working on the correct branch.\n\n## 2. Install Maestro CLI Locally\n\nTo install Maestro on your local machine for testing:\n\n1. Open a terminal and run the following commands:\n\n    ```bash\n    # Install Maestro globally\n    brew tap mobile-dev-inc/tap\n    brew install maestro\n    maestro --version\n    ```\n\n2. If you encounter any permission issues with Homebrew, you may need to fix them:\n\n    ```bash\n    sudo chown -R $(whoami) /usr/local/Cellar /usr/local/Homebrew /usr/local/bin /usr/local/sbin /usr/local/share /usr/local/opt /usr/local/etc /usr/local/include /usr/local/lib\n    ```\n\n3. Re-run the installation commands:\n\n    ```bash\n    brew tap mobile-dev-inc/tap\n    brew install maestro\n    brew doctor\n    ```\n\n4. For installation options without Homebrew, refer to the [Maestro Installation Guide](https://maestro.mobile.dev/getting-started/installation).\n\n## 3. Configure EAS Build\n\nIf EAS Build is not yet set up, follow these steps:\n\n1. Initialize EAS in your project:\n\n    ```bash\n    eas init\n    eas build:configure\n    ```\n\n2. Add the following to your `app.config.js` file to link the project to the correct owner:\n\n    ```json\n    {\n      \"owner\": \"roopesh565\"\n    }\n    ```\n\n3. If this configuration is already set up by your team, you may skip this step.\n\n## 4. Disable New Android Build Infrastructure\n\nFor Maestro E2E testing, you must disable the New Android Build Infrastructure:\n\n1. Visit the [Expo Project Settings](https://expo.dev/accounts/[account]/projects/[project]/settings).\n2. Disable the **New Android Build Infrastructure** option.\n\n## 5. Create Maestro Test Flows\n\n1. Create a `maestro` directory in the root of your project:\n\n    ```bash\n    mkdir maestro\n    ```\n\n2. Inside the `maestro` directory, create test flow files, such as:\n\n   - **home.yaml** (for testing the home screen):\n\n     ```yaml\n     appId: your.expo.project.appId\n     ---\n     - launchApp\n     - assertVisible: 'Welcome!'\n     ```\n\n   - **expand_test.yaml** (for testing the Explore screen):\n\n     ```yaml\n     appId: your.expo.project.appId\n     ---\n     - launchApp\n     - tapOn: 'Explore.*'\n     - tapOn: '.*File-based routing'\n     - assertVisible: 'This app has two screens.*'\n     ```\n\n&gt; Replace `your.expo.project.appId` with the actual app ID (e.g., `com.halspan.app.qa`).\n\n## 6. Test Locally\n\nTo run the tests locally on an emulator or simulator:\n\n```bash\n# Run the tests\nmaestro test maestro/home.yaml\nmaestro test maestro/expand_test.yaml\n</code></pre>"},{"location":"maestro/#7-create-custom-eas-build-workflow","title":"7. Create Custom EAS Build Workflow","text":"<p>To integrate Maestro with your EAS build process, create a custom build workflow:</p> <ol> <li> <p>Create the <code>.eas/build</code> directory in your project root:</p> <pre><code>mkdir -p .eas/build\n</code></pre> </li> <li> <p>Inside <code>.eas/build</code>, create a file called <code>build-and-maestro-test.yml</code>:</p> <pre><code>build:\n  name: Create a build and run Maestro tests on it\n  steps:\n    - eas/build\n    - eas/maestro_test:\n        inputs:\n          flow_path: |\n            maestro/home.yaml\n            maestro/expand_test.yaml\n</code></pre> </li> </ol> <p>This YAML file defines the build steps, including building the app and running Maestro tests.</p>"},{"location":"maestro/#8-modify-easjson","title":"8. Modify <code>eas.json</code>","text":"<p>Update your <code>eas.json</code> file to include a new profile for running Maestro tests:</p> <pre><code>{\n  \"build\": {\n    \"build-and-maestro-test\": {\n      \"withoutCredentials\": true,\n      \"config\": \"build-and-maestro-test.yml\",\n      \"android\": {\n        \"buildType\": \"apk\",\n        \"image\": \"latest\"\n      },\n      \"ios\": {\n        \"simulator\": true,\n        \"image\": \"latest\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"maestro/#9-run-eas-build-with-maestro-tests","title":"9. Run EAS Build with Maestro Tests","text":"<p>To trigger the EAS build and run the Maestro tests, use the following command:</p> <pre><code>eas build --profile build-and-maestro-test --local\n</code></pre> <p>This will build the app and execute the Maestro tests as defined in the workflow.</p>"},{"location":"maestro/#10-view-test-results","title":"10. View Test Results","text":"<p>Once the build and tests are complete, you can view the results and download test artifacts (e.g., screenshots) from the EAS build page. Artifacts generated by Maestro will also be stored locally at <code>~/.maestro/tests</code>.</p>"},{"location":"maestro/#conclusion","title":"Conclusion","text":"<p>By following these steps, you have successfully set up Maestro for E2E testing in your Expo project. Feel free to reach out if you encounter any issues during the process. ```</p> <p>This <code>maestro.md</code> file provides a comprehensive guide for setting up Maestro E2E testing in an Expo project. Let me know if any adjustments are needed!</p>"}]}